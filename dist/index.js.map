{"version":3,"sources":["../src/index.js"],"names":["FlexPaneBar","props","buttonProps","children","React","Children","map","child","type","name","buttons","cloneElement","FlexPaneTitle","FlexPaneButtons","mode","index","undefined","modes","classNames1","classNames2","classNames3","onButtonClick","FlexPane","refPane","createRef","console","log","classNames_","className","toArray","bar","slice","Component","FlexPaneContainer","state","handleButtonClick","bind","setState","key"],"mappings":"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","file":"index.js","sourcesContent":["\r\nimport React from \"react\"\r\n\r\nimport classNames from \"classnames\"\r\n\r\n// nodemon -w src --exec npm run repack\r\n\r\n\r\nexport const FlexPaneBar = (props) => {\r\n    let buttonProps = props.buttonProps\r\n    let children = React.Children.map(props.children,(child) => {\r\n        if (child.type.name == 'FlexPaneButtons') {\r\n            let buttons = React.cloneElement(child,{buttonProps})\r\n            return buttons\r\n        }\r\n        return child\r\n    })\r\n    return <div className=\"flexpane-bar\">{children}</div>\r\n}\r\n\r\nexport const FlexPaneTitle = (props) => {\r\n    return <span>FlexPaneTitle test</span>\r\n}\r\n\r\n/* \r\n<li key=\"3\" className=\"flexpane-title\">{buttonProps.title}</li>\r\n*/\r\n\r\nexport const FlexPaneButtons = (props) => {\r\n\r\n    \r\n    let buttonProps = props.buttonProps\r\n\r\n    var mode = buttonProps.index !== undefined ? buttonProps.modes[buttonProps.index] : \"normal\"\r\n    var classNames1 = classNames(\"flexpane-resize\",\"flexpane-maximize\",{\"flexpane-button-active\":mode !== \"maximized\"})\r\n    var classNames2 = classNames(\"flexpane-resize\",\"flexpane-normalize\",{\"flexpane-button-active\":mode !== \"normal\"})\r\n    var classNames3 = classNames(\"flexpane-resize\",\"flexpane-hide\",{\"flexpane-button-active\":mode !== \"hidden\"})\r\n\r\n    //var buttonsBefore = (this.props.buttonsBefore || []).map( (button,i) => <li key={'b' + i}>{button}</li>)\r\n    //var buttonsAfter = (this.props.buttonsAfter || []).map( (button,i) => <li key={'a' + i}>{button}</li>)\r\n\r\n    return  <ul className=\"flexpane-buttons\"> \r\n                <li key=\"0\"><button className={classNames1} onClick={() => {buttonProps.onButtonClick(buttonProps.index,\"maximized\")}}><svg enableBackground=\"new 0 0 32 32\" height=\"32px\" id=\"Layer_1\" version=\"1.1\" viewBox=\"0 0 32 32\" width=\"32px\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"><path d=\"M18.221,7.206l9.585,9.585c0.879,0.879,0.879,2.317,0,3.195l-0.8,0.801c-0.877,0.878-2.316,0.878-3.194,0  l-7.315-7.315l-7.315,7.315c-0.878,0.878-2.317,0.878-3.194,0l-0.8-0.801c-0.879-0.878-0.879-2.316,0-3.195l9.587-9.585  c0.471-0.472,1.103-0.682,1.723-0.647C17.115,6.524,17.748,6.734,18.221,7.206z\" fill=\"#515151\"/></svg></button></li>\r\n                <li key=\"1\"><button className={classNames2} onClick={() => {buttonProps.onButtonClick(buttonProps.index,\"normal\")}}><svg enableBackground=\"new 0 0 32 32\" height=\"32px\" id=\"Layer_1\" version=\"1.1\" viewBox=\"0 0 32 32\" width=\"32px\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"><path d=\"M24.291,14.276L14.705,4.69c-0.878-0.878-2.317-0.878-3.195,0l-0.8,0.8c-0.878,0.877-0.878,2.316,0,3.194  L18.024,16l-7.315,7.315c-0.878,0.878-0.878,2.317,0,3.194l0.8,0.8c0.878,0.879,2.317,0.879,3.195,0l9.586-9.587  c0.472-0.471,0.682-1.103,0.647-1.723C24.973,15.38,24.763,14.748,24.291,14.276z\" fill=\"#515151\"/></svg></button></li>\r\n                <li key=\"2\"><button className={classNames3} onClick={() => {buttonProps.onButtonClick(buttonProps.index,\"hidden\")}}><svg enableBackground=\"new 0 0 32 32\" height=\"32px\" id=\"Layer_1\" version=\"1.1\" viewBox=\"0 0 32 32\" width=\"32px\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"><path d=\"M14.77,23.795L5.185,14.21c-0.879-0.879-0.879-2.317,0-3.195l0.8-0.801c0.877-0.878,2.316-0.878,3.194,0  l7.315,7.315l7.316-7.315c0.878-0.878,2.317-0.878,3.194,0l0.8,0.801c0.879,0.878,0.879,2.316,0,3.195l-9.587,9.585  c-0.471,0.472-1.104,0.682-1.723,0.647C15.875,24.477,15.243,24.267,14.77,23.795z\" fill=\"#515151\"/></svg></button></li>\r\n            </ul>\r\n}\r\n\r\nexport class FlexPane extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.refPane = React.createRef()\r\n        //console.log('FlexPane.constructor',props)\r\n    }\r\n\r\n    render() {\r\n\r\n        let buttonProps = this.props.buttonProps\r\n\r\n        console.log('FlexPane.render buttonProps',buttonProps)\r\n    \r\n        var mode = buttonProps.modes[buttonProps.index]\r\n\r\n        var classNames_ = {\r\n            \"flexpane-pane-normal\" : mode === \"normal\",\r\n            \"flexpane-pane-maximum\": mode === \"maximized\",\r\n            \"flexpane-pane-hidden\": mode === \"hidden\"\r\n        }\r\n\r\n        if (this.props.className != null) {\r\n            classNames_[this.props.className] = true\r\n        }\r\n        \r\n        var refPane = this.props.refPane || this.refPane\r\n\r\n        //console.log('this.props',this.props)\r\n\r\n        var children = React.Children.toArray(this.props.children)\r\n\r\n        let bar\r\n\r\n        if (children[0].type.name === 'FlexPaneBar') {\r\n            bar = React.cloneElement(children[0], {buttonProps})\r\n            children = children.slice(1)\r\n        } else {\r\n            bar = null\r\n        }\r\n\r\n        return <React.Fragment>\r\n            {bar}\r\n            <div key={this.props.index} className={classNames(\"flexpane-pane\",classNames_)} ref={refPane} >{children}</div>\r\n            </React.Fragment>\r\n    }\r\n}\r\n\r\nexport class FlexPaneContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        var modes = React.Children.map(this.props.children, (child,index) => {\r\n            return child.props.mode || \"normal\";\r\n        })\r\n\r\n        this.state = {\r\n            modes: modes\r\n        }\r\n\r\n        this.handleButtonClick = this.handleButtonClick.bind(this)\r\n    }\r\n\r\n    handleButtonClick(index, mode) {\r\n        var modes = this.state.modes.slice()\r\n        if (mode === \"maximized\") {\r\n            modes = modes.map( mode => mode === \"maximized\" ? \"normal\" : mode )\r\n        }\r\n        modes[index] = mode\r\n        this.setState({modes:modes})\r\n    }\r\n\r\n    render() {\r\n        var children = React.Children.map(this.props.children, (child,index) => {\r\n            var buttonProps = {key:index, modes:this.state.modes, index:index, onButtonClick: this.handleButtonClick}\r\n            return React.cloneElement(child,{buttonProps});\r\n        })\r\n        return (<div className=\"flexpane-container\">{children}</div>)\r\n    }\r\n}\r\n\r\n"]}